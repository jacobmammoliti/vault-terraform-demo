global:
  tlsDisable: false
  %{ if kubernetes_image_pull_secrets != null }
  imagePullSecrets:
  %{ for secret in kubernetes_image_pull_secrets }
    - name: ${secret}
  %{ endfor }
  %{ endif }
injector:
  enabled: ${vault_injector_enable}
  image: 
    repository: ${vault_injector_image_repository}
    tag: ${vault_injector_image_tag}
  agentImage:
    repository: ${vault_image_repository}
    tag: ${vault_image_tag}
server:
  serviceAccount:
    create: false
    name: ${kubernetes_vault_service_account}
  image:
    repository: ${vault_image_repository}
    tag: ${vault_image_tag}
  dataStorage:
    size: ${vault_data_storage_size}Gi
  service:
    enabled: true
    type: ${kubernetes_vault_server_service_type}
  ha:
    enabled: true
    replicas: ${vault_replica_count}
    apiAddr: "https://$(VAULT_K8S_POD_NAME).${helm_release_name}-internal"
    raft:
      enabled: true
      setNodeId: true

      config: |
        ui = true
        %{ if kubernetes_secret_name_vault_license != null }
        license_path = "/vault/userconfig/${kubernetes_secret_name_vault_license}/license.hclic"
        %{ endif }

        listener "tcp" {
          address         = "[::]:8200"
          cluster_address = "[::]:8201"

          tls_disable   = false
          tls_cert_file = "/vault/userconfig/${kubernetes_secret_name_tls_cert}/tls.crt"
          tls_key_file  = "/vault/userconfig/${kubernetes_secret_name_tls_cert}/tls.key"

          tls_require_and_verify_client_cert = false
          tls_disable_client_certs           = true
        }

        storage "raft" {
          path = "/vault/data"

          retry_join {
            auto_join             = "provider=k8s namespace=${kubernetes_namespace} label_selector=\"component=server,app.kubernetes.io/name=vault\""
            %{ if vault_leader_tls_servername != null }
            leader_tls_servername = "${vault_leader_tls_servername}"
            %{ else }
            leader_tls_servername = "HOSTNAME.${helm_release_name}-internal"
            %{ endif }
            leader_ca_cert_file   = "/vault/userconfig/${kubernetes_secret_name_tls_ca}/ca.crt"
          }
        }

        seal "${vault_seal_method}" {}

        service_registration "kubernetes" {}
  extraVolumes:
    - type: secret
      name: ${kubernetes_secret_name_tls_cert}
    - type: secret
      name: ${kubernetes_secret_name_tls_ca}
    %{ if kubernetes_secret_name_vault_license != null }
    - type: secret
      name: ${kubernetes_secret_name_vault_license}
    %{ endif }
  extraEnvironmentVars:
    VAULT_CAPATH: /vault/userconfig/tls-ca/ca.crt
    VAULT_ADDR: https://$(VAULT_K8S_POD_NAME).${helm_release_name}-internal:8200
    VAULT_SKIP_VERIFY: true
  %{ if kubernetes_extra_secret_environment_variables != null }
  extraSecretEnvironmentVars:
  %{ for secret in kubernetes_extra_secret_environment_variables }
    - envName: ${secret["envName"]}
      secretName: ${secret["secretName"]}
      secretKey: ${secret["secretKey"]}
  %{ endfor }
  %{ endif }
ui:
  enabled: true
  serviceType: ${kubernetes_vault_ui_service_type}